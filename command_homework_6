-- Таблица лайков
DROP TABLE IF EXISTS likes;
CREATE TABLE likes (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  user_id INT UNSIGNED NOT NULL,
  target_id INT UNSIGNED NOT NULL,
  target_type ENUM('messages', 'users', 'posts', 'media') NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Временная таблица типов лайков
DROP TABLE IF EXISTS target_types;
CREATE TEMPORARY TABLE target_types (
  name VARCHAR(100) NOT NULL UNIQUE
);

INSERT INTO target_types (name) VALUES 
  ('messages'),
  ('users'),
  ('media'),
  ('posts');

-- Заполняем лайки
INSERT INTO likes 
  SELECT 
    id, 
    FLOOR(1 + (RAND() * 100)), 
    FLOOR(1 + (RAND() * 100)),
    (SELECT name FROM target_types ORDER BY RAND() LIMIT 1),
    CURRENT_TIMESTAMP 
  FROM messages;

-- Проверим
SELECT * FROM likes LIMIT 10;

-- Создадим таблицу постов
DROP TABLE IF EXISTS posts;
CREATE TABLE posts (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
  user_id INT UNSIGNED NOT NULL,
  community_id INT UNSIGNED,
  head VARCHAR(255),
  body TEXT NOT NULL,
  media_id INT UNSIGNED,
  is_public BOOLEAN DEFAULT TRUE,
  is_deleted BOOLEAN DEFAULT FALSE,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
-- Заполним таблицу постов
UPDATE posts SET user_id = FLOOR(1 + RAND() * 100);
UPDATE posts SET media_id = FLOOR(1 + RAND() * 100);
UPDATE posts SET community_id = FLOOR(1 + RAND() * 100);
UPDATE posts p JOIN communities_users cu USING (user_id) SET p.community_id = cu.community_id;

SELECT * FROM posts;
SELECT * from communities_users;

-- 2. Создать все необходимые внешние ключи и диаграмму отношений.
  ADD CONSTRAINT profiles_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id)
      ON DELETE CASCADE;

ALTER TABLE profiles
  ADD CONSTRAINT profiles_city_id_fk 
    FOREIGN KEY (city_id) REFERENCES cities(id)
      ON DELETE set null;

ALTER TABLE cities
  ADD CONSTRAINT cities_country_id_fk 
    FOREIGN KEY (country_id) REFERENCES countries(id)
      ON DELETE set null;

ALTER TABLE communities_users
  ADD CONSTRAINT communities_users_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id)
      ON DELETE CASCADE;
     
ALTER TABLE communities_users
  ADD CONSTRAINT communities_users_community_id_fk 
    FOREIGN KEY (community_id) REFERENCES communities(id)
      ON DELETE CASCADE;  
     
ALTER TABLE media
  ADD CONSTRAINT media_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id)
      ON DELETE CASCADE;  
     
ALTER TABLE media
  ADD CONSTRAINT media_media_type_id_fk 
    FOREIGN KEY (media_type_id) REFERENCES media_types(id)
      ON DELETE CASCADE;
     
ALTER TABLE friendship
  ADD CONSTRAINT friendship_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id)
      ON DELETE CASCADE;  
      
ALTER TABLE friendship
  ADD CONSTRAINT friendship_friendship_status_id_fk 
    FOREIGN KEY (friendship_status_id) REFERENCES friendship_statuses(id)
      ON DELETE CASCADE;

ALTER TABLE posts
  ADD CONSTRAINT posts_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id)
      ON DELETE CASCADE; 
     
ALTER TABLE likes
  ADD CONSTRAINT likes_user_id_fk 
    FOREIGN KEY (user_id) REFERENCES users(id)
      ON DELETE CASCADE;    
     
ALTER TABLE messages
  ADD CONSTRAINT messages_from_user_id_fk 
    FOREIGN KEY (from_user_id) REFERENCES users(id)
      ON DELETE CASCADE;   
      
ALTER TABLE posts
  ADD CONSTRAINT posts_community_id_fk 
    FOREIGN KEY (community_id) REFERENCES communities(id)
      ON DELETE set null;   
      
ALTER TABLE posts
  ADD CONSTRAINT posts_media_id_fk 
    FOREIGN KEY (media_id) REFERENCES media(id)
      ON DELETE set null;     
      
ALTER TABLE messages
  ADD CONSTRAINT messages_media_id_fk 
    FOREIGN KEY (media_id) REFERENCES media(id)
      ON DELETE set null;
     
-- 3. Определить кто больше поставил лайков (всего) - мужчины или женщины?      
select * from likes;
select * from profiles;  
-- верное решение
SELECT
	(SELECT gender FROM profiles WHERE user_id = likes.user_id) AS gender,
	COUNT(*) AS total
    FROM likes
    GROUP BY gender
    ORDER BY total DESC
    LIMIT 1;  

-- Ниже выдает ошибку Subquery returns more than 1 row
select
	SUM(CASE WHEN (select user_id FROM profiles WHERE gender = 'M') THEN 1 ELSE 0 END) AS male,
	SUM(CASE WHEN (select user_id FROM profiles WHERE gender = 'F') THEN 1 ELSE 0 END) AS female
from likes GROUP BY target_type;
-- Ниже работает по отдельности  
select target_type,
 	COUNT(*) AS male
  	FROM likes
    WHERE user_id IN (SELECT user_id FROM profiles WHERE gender = 'M') GROUP BY target_type;

select target_type,
	COUNT(*) AS female
  	FROM likes
    WHERE user_id IN (SELECT user_id FROM profiles WHERE gender = 'F') GROUP BY target_type;
   
-- 4. Вывести для каждого пользователя количество созданных сообщений, постов, загруженных медиафайлов и поставленных лайков.

   SELECT 
  CONCAT(first_name, ' ', last_name) AS user,
  (SELECT COUNT(*) FROM messages WHERE messages.from_user_id = users.id) AS total_messages,
  (SELECT COUNT(*) FROM posts WHERE posts.user_id = users.id) AS total_posts,  
	(SELECT COUNT(*) FROM media WHERE media.user_id = users.id) AS total_media, 
	(SELECT COUNT(*) FROM likes WHERE likes.user_id = users.id) AS total_likes
	  FROM users;
-- 5. (по желанию) Подсчитать количество лайков которые получили 10 самых последних сообщений.

SELECT SUM(likes_total) FROM  
  (SELECT 
    (SELECT COUNT(*) FROM likes 
      WHERE target_id = messages.id AND target_type = 'messages') AS likes_total  
    FROM messages 
    ORDER BY created_at DESC 
    LIMIT 10) AS messages_likes;  

   -- второй способ	 
	 SELECT COUNT(*) FROM likes 
  WHERE target_type = 'messages'
    AND target_id IN (SELECT * FROM (
      SELECT id FROM messages 
        ORDER BY created_at DESC LIMIT 10) AS sorted_messages);	 
